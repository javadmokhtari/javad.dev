{"version":3,"sources":["redux/actions.js","redux/actionTypes.js","components/Layout.js","components/About.js","components/Blog.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["changeLanguge","lng","type","payload","Layout","props","toggleLanguage","bind","mainStyle","languageStyle","e","this","changeLanguage","Container","Row","Col","className","xs","sm","md","lg","xl","Button","onClick","variant","to","children","Component","connect","state","console","log","basename","Helmet","path","Boolean","window","location","hostname","match","initialState","mySimpleReducer","action","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebe6a6df.chunk.js","sourcesContent":["import { CHANGE_LANGUAGE } from './actionTypes';\n\nconst changeLanguge = (lng) => {\n    return {\n        type: CHANGE_LANGUAGE,\n        payload: {\n            lng: lng\n        }\n    }\n}\n\nexport default changeLanguge;\n","export const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\n\n\n","import React, { Component } from 'react'\nimport {Row, Container, Col, Button} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport changeLanguage from '../redux/actions'\nimport '../layout.css'\nimport {\n    Link,\n    HashRouter as Router,\n  } from \"react-router-dom\";\nclass Layout extends Component {\n    constructor(props) {\n        super(props)\n\n        this.toggleLanguage = this.toggleLanguage.bind(this)\n        this.mainStyle = this.mainStyle.bind(this)\n        this.languageStyle = this.languageStyle.bind(this)\n    }\n\n    toggleLanguage(e) {\n        \n        if (this.props.lng === \"English\") {\n            this.props.changeLanguage(\"فارسی\")\n        } else {\n            this.props.changeLanguage(\"English\")\n        }\n    }\n\n    mainStyle() {\n        return this.props.lng === \"فارسی\" ? \"english\" : \"persian\"\n    }\n\n    languageStyle() {\n        return this.props.lng === \"English\" ? \"english\" : \"persian\"\n    }\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col className={this.languageStyle()} xs={6} sm={6} md={6} lg={6} xl={6}>\n                        <Button onClick={(e) => this.toggleLanguage(e)} variant=\"outline-dark\">{this.props.lng}</Button>\n                    </Col>\n                    <Col xs={6} sm={6} md={6} lg={6} xl={6}>\n                        <Router>\n                            <Link to=\"/\"><Button variant=\"outline-danger\">/</Button></Link>\n                        </Router>\n                    </Col>\n                </Row>\n                <Row className={\"main \" + this.mainStyle()}>\n                    {this.props.children}\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    lng: state.lng\n  })\n  \nexport default connect(mapStateToProps, { changeLanguage })(Layout)\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                About\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Blog extends Component {\n    render() {\n        return (\n            <div>\n                Blog\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout';\nimport { connect } from 'react-redux';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport About from './components/About'\nimport Blog from './components/Blog'\nimport './home.css'\nimport {Helmet} from \"react-helmet\";\n\nfunction App(props) {\n\n  console.log(props)\n  return (\n    <Layout>\n      <Router basename='/'>\n      {props.lng === \"English\" ? (\n        <>\n          <Helmet>\n            <title>جواد.دو | خانه</title>\n          </Helmet>\n          <h1>جواد مختاری کوشیار</h1>\n          <ul className=\"menu\">\n              <li><Link to=\"/about\">درباره من</Link></li>\n              <li><Link to=\"/email\">ایمیل</Link></li>\n          </ul>\n          <Switch>\n            \n          <Route path=\"/about\">\n            <Helmet>\n              <title>جواد.دو | درباره من</title>\n            </Helmet>\n              <p>توسعه دهنده فرانت‌اند برنامه های تحت وب</p>              \n          </Route>\n          <Route path=\"/email\">\n            <Helmet>\n              <title>جواد.دو | ایمیل</title>\n            </Helmet>\n            <p className=\"english\">javadmokhtari (@) outlook (.) com</p>\n            <p className=\"english\">me (@) javad (.) dev</p>\n          </Route>\n        </Switch>\n        </>          \n      ) : (\n        <>\n        <Helmet>\n              <title>Javad.dev | Home</title>\n        </Helmet>\n        <h1>Javad Mokhtari Koushyar</h1>\n        <ul className=\"menu\">\n            <li><Link to=\"/about\">About Me</Link></li>\n            <li><Link to=\"/email\">Email</Link></li>\n        </ul>\n        <Switch>\n        <Route path=\"/about\">\n            <Helmet>\n              <title>Javad.dev | About Me</title>\n            </Helmet>\n          <p>Front-End Web Developer</p>\n        </Route>\n        <Route path=\"/email\">\n            <Helmet>\n              <title>Javad.dev | Email</title>\n            </Helmet>\n          <p>javadmokhtari (@) outlook (.) com</p>\n          <p>me (@) javad (.) dev</p>\n        </Route>\n      </Switch>\n      </>\n      )}\n      </Router>\n    </Layout>\n  )\n}\n\nconst mapStateToProps = state => ({\n  lng: state.lng\n})\n\nexport default connect(mapStateToProps, null)(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_LANGUAGE } from './actionTypes';\n\nconst initialState = {\n    lng: \"فارسی\"\n}\nfunction mySimpleReducer(state = initialState, action) {\n    switch(action.type) {\n        case CHANGE_LANGUAGE:\n            return {\n                ...state,\n                lng: action.payload.lng,\n            }\n        default:\n            return state\n    }\n}\n\nexport default mySimpleReducer;","import { createStore } from \"redux\";\nimport mySimpleReducer from \"./reducers\";\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\n\nconst store = createStore(mySimpleReducer, /* preloadedState, */ devToolsEnhancer(\n    // options like actionSanitizer, stateSanitizer\n  ));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}