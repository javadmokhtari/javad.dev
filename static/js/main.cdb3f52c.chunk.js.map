{"version":3,"sources":["components/Home.js","redux/actions.js","redux/actionTypes.js","components/Layout.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["Home","Component","changeLanguge","lng","type","payload","classify","require","Layout","props","state","Fa","mainStyles","changeLanguage","bind","e","this","target","innerHTML","toString","console","log","Container","className","Row","Button","onClick","variant","connect","App","Boolean","window","location","hostname","match","mySimpleReducer","action","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAEqBA,E,iLAEb,OACI,yC,GAHsBC,a,+CCSnBC,EATO,SAACC,GACnB,MAAO,CACHC,KCJuB,kBDKvBC,QAAS,CACLF,IAAKA,KEAbG,EAAWC,EAAQ,GAGjBC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,IAAI,GAGR,EAAKC,WAAaN,EAAS,CACvB,MAAQ,EACR,QAAY,EAAKI,MAAMC,GACvB,SAAY,EAAKD,MAAMC,KAG3B,EAAKE,eAAiB,EAAKA,eAAeC,KAApB,gBAbP,E,4EAgBJC,GACXC,KAAKP,MAAMI,eAAeE,EAAEE,OAAOC,UAAUC,YAC7CC,QAAQC,IAAI,sB,+BAIN,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAWP,KAAKN,MAAMC,GAAK,UAAY,WAC9C,kBAACa,EAAA,EAAD,CAAKD,UAAU,cACX,kBAACE,EAAA,EAAD,CAAQF,UAAU,UAAUG,QAAS,SAACX,GAAD,OAAO,EAAKF,eAAeE,IAAIY,QAAQ,gBAA5E,YAEJ,kBAACH,EAAA,EAAD,CAAKD,UAAWP,KAAKJ,YACjB,wI,GA9BCX,aAqCN2B,cACX,KACA,CAAEf,kBAFSe,CAGXpB,GCpCWqB,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCFSC,MAdf,WAAwD,IAA/BzB,EAA8B,uDAAtB,CAAC,CAAC,EAAK,MAAO0B,EAAQ,uCACnD,OAAOA,EAAOhC,MACV,IJJuB,kBIKnB,MAAM,GAAN,mBACOM,GADP,CAEI,CACIP,IAAKiC,EAAOjC,OAGxB,QACI,OAAOO,I,QCLJ2B,EAHDC,sBAAYH,EAAuCI,8BCMjEC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SHyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.cdb3f52c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                Home\n            </div>\n        )\n    }\n}\n","import { CHANGE_LANGUAGE } from './actionTypes';\n\nconst changeLanguge = (lng) => {\n    return {\n        type: CHANGE_LANGUAGE,\n        payload: {\n            lng: lng\n        }\n    }\n}\n\nexport default changeLanguge;\n","export const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\n\n\n","import React, { Component } from 'react';\nimport {Row, Container, Button} from 'react-bootstrap';\nimport './../layout.css';\nimport { connect } from 'react-redux';\nimport changeLanguage from './../redux/actions';\n\nvar classify = require('classnames');\n\n\nclass Layout extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            Fa: true,\n        }\n\n        this.mainStyles = classify({\n            'main': true,\n            'persian' : this.state.Fa,\n            'english': !this.state.Fa\n        })\n\n        this.changeLanguage = this.changeLanguage.bind(this)\n    }\n\n    changeLanguage(e) {\n        this.props.changeLanguage(e.target.innerHTML.toString())\n        console.log(\"Language Changed\")\n    }\n\n    \n    render() {\n        return (\n            <Container className={this.state.Fa ? \"english\" : \"persian\"}>\n                <Row className=\"pull-right\">\n                    <Button className=\"btn-lng\" onClick={(e) => this.changeLanguage(e)} variant=\"outline-dark\">English</Button>\n                </Row>\n                <Row className={this.mainStyles}>\n                    <h1>جواد مختاری کوشیار</h1>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default connect(\n    null,\n    { changeLanguage }\n  )(Layout)","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <Layout>\n      <Home />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_LANGUAGE } from './actionTypes';\n\nfunction mySimpleReducer(state = [{\"a\": \"B\"}], action) {\n    switch(action.type) {\n        case CHANGE_LANGUAGE:\n            return [\n                ...state,\n                {\n                    lng: action.lng,\n                }\n            ]\n        default:\n            return state\n    }\n}\n\nexport default mySimpleReducer;","import { createStore } from \"redux\";\nimport mySimpleReducer from \"./reducers\";\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\n\nconst store = createStore(mySimpleReducer, /* preloadedState, */ devToolsEnhancer(\n    // options like actionSanitizer, stateSanitizer\n  ));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}